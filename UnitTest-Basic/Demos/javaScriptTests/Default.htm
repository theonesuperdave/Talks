<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>QUnit basic example</title>
    <link rel="stylesheet" href="scripts/qunit-1.12.0.css" />
    <script type="text/javascript" src="scripts/qunit-1.12.0.js"></script>
    <script type="text/javascript" src="scripts/sampleLibrary-1.0.0.js"></script>
</head>
<body>
    <div id="qunit">
    </div>
    <div id="qunit-fixture">
    </div>
    <script type="text/javascript">

        module("Jedi Stuff"); // Define a group label

        test("a basic test example", function () {
            var value = "hello";
            equal(value, "hello", "We expect value to be hello");
        });
        test("The Force is strong with this one...", function () {
            var value = "That is why you fail...";
            equal(value, "Do or not. There is no try");
        });


        module("The Dark Side"); // Define a second group label

        test("Who's the more foolish? The fool, or the fool who follows him?", function () {
            var value = "Rawr!! Wrooo!!";
            equal(value, "Get us outtah here, Chewie!");
        });

        module("module", {
            setup: function () {
                ok(true, "one extra assert per test...");
            }, teardown: function () {
                ok(true, "...and one extra assert after each test");
            }
        });
        test("test with setup and teardown", function () {
            expect(2); // Set up how many assertions are expected for this test
//            ok(true);
        });

//        module(); // Reset any setup/teardown


        module("Sample Library");

        test("Let's Give it a spin, shall we?", function () {
            var value = testLibrary.returnTrue();
            equal(value, true, "We expect value to be 'true'");
        });

        test("I wonder if we can get to this function?", function () {
            var value = returnFalse();
            equal(value, false, "We expect value to be 'false'");
        });

//        deepEqual()
//        A deep recursive comparison assertion, working on primitive types, arrays, objects, regular expressions, dates and functions.

//        equal()
//        A non-strict comparison assertion, roughly equivalent to JUnit assertEquals.

//        notDeepEqual()
//        An inverted deep recursive comparison assertion, working on primitive types, arrays, objects, regular expressions, dates and functions.

//        notEqual()
//        A non-strict comparison assertion, checking for inequality.

//        notStrictEqual()
//        A non-strict comparison assertion, checking for inequality.

//        ok()
//        A boolean assertion, equivalent to CommonJS’s assert.ok() and JUnit’s assertTrue(). Passes if the first argument is truthy.

//        strictEqual()
//        A strict type and value comparison assertion.

//        throws()
//        Assertion to test if a callback throws an exception when run.
    </script>
</body>
</html>
